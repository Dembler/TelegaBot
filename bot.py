from multiprocessing.connection import answer_challenge

from telegram.ext import ApplicationBuilder, MessageHandler, filters, CallbackQueryHandler, CommandHandler

from gpt import *
from gpt import ChatGptService
from util import *

async def start(update, cotext):
    dialog.mode = "main"
    text = load_message("main")
    await send_photo(update, cotext,"main")
    await send_text(update, cotext, text)
    await show_main_menu(update, cotext, {
        'start' : '–≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞',
        'profile' : '–≥–µ–Ω–µ—Ä–∞—Ü–∏—è Tinder - –ø—Ä–æ—Ñ–∏–ª—è üòé',
        'opener' : '—Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞ ü•∞',
        'message' : '–ø–µ—Ä–µ–ø–∏—Å–∫–∞ –æ—Ç –≤–∞—à–µ–≥–æ –∏–º–µ–Ω–∏ üòà',
        'date' : '–ø–µ—Ä–µ–ø–∏—Å–∫–∞ —Å–æ –∑–≤–µ–∑–¥–∞–º–∏ üî•',
        'gpt' : '–∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å —á–∞—Ç—É GPT üß†'
    })

async def gpt(update, cotext):
    dialog.mode = "gpt"
    text = load_message("gpt")
    await send_photo(update, cotext,"gpt")
    await send_text(update, cotext, text)

async def gpt_dialog(update, cotext):
    text = update.message.text
    prompt = load_prompt("gpt")
    answer = await chatgpt.send_question(prompt, text)
    await send_text(update, cotext, answer)

async def date(update, cotext):
    dialog.mode = "date"
    text = load_message("date")
    await send_photo(update, cotext,"date")
    await send_text(update, cotext, text)
    await send_text_buttons(update, cotext, "–ó–∞–ø—É—Å—Ç–∏—Ç—å?", {
        "date_grande": "–ê—Ä–∏–∞–Ω–∞ –ì—Ä–∞–Ω–¥–µ",
        "date_robbie": "–ú–∞—Ä–≥–æ –†–æ–±–±–∏",
        "date_zendaya": "–ó–µ–Ω–¥–µ—è",
        "date_gosling": "–†–∞–π–∞–Ω –ì–æ—Å–ª–∏–Ω–≥",
        "date_hardy": "–¢–æ–º –•–∞—Ä–¥–∏",
    })

async def date_dialog(update, cotext):
    text = update.message.text
    my_message = await send_text(update, cotext, "–î–µ–≤—É—à–∫–∞ –Ω–∞–±–∏—Ä–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ...")
    answer = await chatgpt.add_message(text)
    await my_message.edit_text(answer)


async def date_button(update, cotext):
    query = update.callback_query.data
    await update.callback_query.answer()
    await send_photo(update, cotext, query)
    await send_text(update, cotext, "–û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä! –ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –¥–µ–≤—É—à–∫—É (–ø–∞—Ä–Ω—è) –Ω–∞ —Å–≤–∏–¥–∞–Ω–∏–µ –∑–∞ 5 —Å–æ–æ–±—â–µ–Ω–∏–π")

    prompt = load_prompt(query)
    chatgpt.set_prompt(prompt)

async def message(update, cotext):
    dialog.mode = "message"
    text = load_message("message")
    await send_photo(update, cotext, "message")
    await send_text_buttons(update, cotext, text, {
        "message_next" : "–°–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
        'message_date' : "–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –Ω–∞ —Å–≤–∏–¥–∞–Ω–∏–µ"
    })
    dialog.List.clear()

async def message_dialog(update, cotext):
    text = update.message.text
    dialog.List.append(text)


async def message_button(update, cotext):
    query = update.callback_query.data
    await update.callback_query.answer()
    prompt = load_prompt(query)
    user_chat_history = "\n\n".join(dialog.List)
    my_message = await send_text(update, cotext, "GhatGPT –¥—É–º–∞–µ—Ç –Ω–∞–¥ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–∞...")
    answer = await chatgpt.send_question(prompt, user_chat_history)
    await my_message.edit_text(answer)

async def profile(update, cotext):
    dialog.mode = "profile"
    text = load_message("profile")
    await send_photo(update, cotext, "profile")
    await send_text(update, cotext, text)
    dialog.user.clear()
    dialog.count = 0
    await send_text(update, cotext, "–°–∫–æ–ª—å–∫–æ –≤–∞–º –ª–µ—Ç?")

async def profile_dialog(update, cotext):
    text = update.message.text
    dialog.count += 1

    if dialog.count == 1:
        dialog.user["age"] =  text
        await send_text(update, cotext, "–ö–µ–º –≤—ã —Ä–∞–±–æ—Ç–∞–µ—Ç–µ?")
    elif dialog.count == 2:
        dialog.user["occupation"] = text
        await send_text(update, cotext, "–£ –≤–∞—Å –µ—Å—Ç—å —Ö–æ–±–±–∏?")
    elif dialog.count == 3:
        dialog.user["hobby"] = text
        await send_text(update, cotext, "–ß—Ç–æ –≤–∞–º –Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è –≤ –ª—é–¥—è—Ö?")
    elif dialog.count == 4:
        dialog.user["annoys"] = text
        await send_text(update, cotext, "–¶–µ–ª–∏ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞?")
    elif dialog.count == 5:
        dialog.user["goals"] = text
        prompt = load_prompt("profile")
        user_info = dialog_user_info_to_str(dialog.user)
        my_message = await send_text(update, cotext, "GhatGPT –∑–∞–Ω–∏–∞–µ—Ç—Å—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥...")
        answer = await chatgpt.send_question(prompt, user_info)
        await my_message.edit_text(answer)

async def opener(update, cotext):
    dialog.mode = "opener"
    text = load_message("opener")
    await send_photo(update, cotext, "opener")
    await send_text(update, cotext, text)
    dialog.user.clear()
    dialog.count = 0
    await send_text(update, cotext, "–ò–º—è –¥–µ–≤—É—à–∫–∏?")

async def opener_dialog(update, cotext):
    text = update.message.text
    dialog.count += 1

    if dialog.count == 1:
        dialog.user["name"] =  text
        await send_text(update, cotext, "–°–∫–æ–ª—å–∫–æ –µ–π –ª–µ—Ç?")
    elif dialog.count == 2:
        dialog.user["age"] = text
        await send_text(update, cotext, "–û—Ü–µ–Ω–∏—Ç–µ –µ—ë –≤–Ω–µ—à–Ω–æ—Å—Ç—å: 1-10 –±–∞–ª–ª–æ–≤")
    elif dialog.count == 3:
        dialog.user["handsome"] = text
        await send_text(update, cotext, "–ö–µ–º –æ–Ω–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç?")
    elif dialog.count == 4:
        dialog.user["occupation"] = text
        await send_text(update, cotext, "–¶–µ–ª–∏ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞?")
    elif dialog.count == 5:
        dialog.user["goals"] = text
        prompt = load_prompt("opener")
        user_info = dialog_user_info_to_str(dialog.user)
        answer = await chatgpt.send_question(prompt, user_info)
        await send_text(update, cotext, answer)



async def hello(update, cotext):
    if dialog.mode == "gpt":
        await gpt_dialog(update, cotext)
    elif dialog.mode == "date":
        await date_dialog(update, cotext)
    elif dialog.mode == "message":
        await message_dialog(update, cotext)
    elif dialog.mode == "profile":
        await profile_dialog(update, cotext)
    elif dialog.mode == "opener":
        await opener_dialog(update, cotext)
    else:
        await send_text(update, cotext,"–ü—Ä–∏–≤–µ—Ç")
        await send_text(update, cotext, "_–ö–∞–∫ –¥–µ–ª–∞?_")
        await send_text(update, cotext, "–¢—ã –Ω–∞–ø–∏—Å–∞–ª:" + update.message.text)
        await send_photo(update, cotext,"avatar_main")
        await send_text_buttons(update, cotext,"–ó–∞–ø—É—Å—Ç–∏—Ç—å?", {
            "start":"–î–ê",
            "stop":"–ù–ï–¢"
        })

async def hello_button(update, cotext):
    query = update.callback_query.data
    if query == "start":
        await send_text(update, cotext, "–ü—Ä–æ—Ü–µ—Å—Å –∑–∞–ø—É—â–µ–Ω")
    else:
        await send_text(update, cotext, "–ü—Ä–æ—Ü–µ—Å—Å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

dialog = Dialog()
dialog.mode = None
dialog.List = []
dialog.count = 0
dialog.user = {}

chatgpt = ChatGptService("javcgkAld/r/7U60nS8WDUhWeWVYkZbhjQYpKBFGTvoj5842ast7Pxc54epaCxHRBWXa4vjUutckFaoaUmyOdt62mPPZjjrSFzHlklUvRxjKkD54HiY1iMRLus7TxOkcmPElgqCRPBocX6wJsuWbUTuGkgPNjhYwE08Bvau9oVOiaBcWnUrI/ewY+ccVqx7dnAN4A7RhT46B8BjZjVtU/H8jZakz1cJir+37f/KOL/cTVnmJo=")

app = ApplicationBuilder().token("8004869844:AAHoK4kNK9NXxmE7VgtFYQqNEnoIm4CwJb0").build()
app.add_handler(CommandHandler("start", start))
app.add_handler(CommandHandler("gpt", gpt))
app.add_handler(CommandHandler("date", date))
app.add_handler(CommandHandler("message", message))
app.add_handler(CommandHandler("profile", profile))
app.add_handler(CommandHandler("opener", opener))
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, hello))
app.add_handler(CallbackQueryHandler(date_button, pattern ="^date_.*"))
app.add_handler(CallbackQueryHandler(message_button, pattern ="^message_.*"))
app.add_handler(CallbackQueryHandler(hello_button))
app.run_polling()
